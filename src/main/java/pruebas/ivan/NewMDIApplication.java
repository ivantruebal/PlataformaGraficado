/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pruebas.ivan;

import Presentacion.api.KrakenApi;
import Presentacion.api.KrakenApi.Method;
import java.awt.AWTException;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AnnotationChangeListener;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author usuario
 */
public class NewMDIApplication extends javax.swing.JFrame {

    private boolean enableTrace;
    private boolean verGraficoClicado;
    private boolean verTablaClicado;
    private boolean enableTrazado;
    private CandlestickChartClass candlestickChart;
    private double oldxPoint;
    private double oldyPoint;
    private double newxPoint;
    private double newyPoint;
    private GestorConexionAPI gcAPI;
    /**
     * Creates new form NewMDIApplication
     */
    public NewMDIApplication() {
        initComponents();
        this.candlestickChart=new CandlestickChartClass(jPanel_Grafico.getSize());
        this.enableTrace=false;  
        this.verGraficoClicado=false;
        this.verTablaClicado=false;
        this.enableTrazado=false;
        this.gcAPI=new GestorConexionAPI();
        //metodo();
        enablePanelGraficoAutoSize();
        TrayIconDemo tid=new TrayIconDemo();
        tid.displayTray();
        //peticionKrakenApi();
        inicializarListaActivos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jComboBox_selectorListas = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_listaActivos = new javax.swing.JTable();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        jTabbedPane_Tools = new javax.swing.JTabbedPane();
        jTabbedPane_Graficos = new javax.swing.JTabbedPane();
        jPanel_Analisis = new javax.swing.JPanel();
        jPanel_HerramientasDeDibujado = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel_Grafico = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jToolBarPesta√±as = new javax.swing.JToolBar();
        jButtonTabla = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        javax.swing.JButton jButtonGrafica = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();
        jMenuView = new javax.swing.JMenu();
        jRadioButtonMenuItemGrafica = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemTabla = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktopPane.setPreferredSize(new java.awt.Dimension(1280, 699));

        jInternalFrame1.setIconifiable(true);
        jInternalFrame1.setResizable(true);
        jInternalFrame1.setMinimumSize(new java.awt.Dimension(0, 0));
        jInternalFrame1.setVisible(true);
        jInternalFrame1.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame1InternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jComboBox_selectorListas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Forex" }));
        jComboBox_selectorListas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_selectorListasActionPerformed(evt);
            }
        });

        jTable_listaActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ticker", "Cotizacion"
            }
        ));
        jTable_listaActivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_listaActivosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_listaActivos);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jComboBox_selectorListas, 0, 194, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jComboBox_selectorListas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        desktopPane.add(jInternalFrame1);
        jInternalFrame1.setBounds(0, 0, 210, 660);

        jInternalFrame2.setIconifiable(true);
        jInternalFrame2.setResizable(true);
        jInternalFrame2.setVisible(true);
        jInternalFrame2.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrame2InternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTabbedPane_Graficos.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane_Graficos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane_GraficosFocusGained(evt);
            }
        });
        jTabbedPane_Graficos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane_GraficosComponentShown(evt);
            }
        });

        jLabel1.setText("Linea");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_HerramientasDeDibujadoLayout = new javax.swing.GroupLayout(jPanel_HerramientasDeDibujado);
        jPanel_HerramientasDeDibujado.setLayout(jPanel_HerramientasDeDibujadoLayout);
        jPanel_HerramientasDeDibujadoLayout.setHorizontalGroup(
            jPanel_HerramientasDeDibujadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addGroup(jPanel_HerramientasDeDibujadoLayout.createSequentialGroup()
                .addGroup(jPanel_HerramientasDeDibujadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel_HerramientasDeDibujadoLayout.setVerticalGroup(
            jPanel_HerramientasDeDibujadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_HerramientasDeDibujadoLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addGap(0, 497, Short.MAX_VALUE))
        );

        jPanel_Grafico.setAutoscrolls(true);
        jPanel_Grafico.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel_Grafico.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel_AnalisisLayout = new javax.swing.GroupLayout(jPanel_Analisis);
        jPanel_Analisis.setLayout(jPanel_AnalisisLayout);
        jPanel_AnalisisLayout.setHorizontalGroup(
            jPanel_AnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_AnalisisLayout.createSequentialGroup()
                .addComponent(jPanel_HerramientasDeDibujado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_Grafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_AnalisisLayout.setVerticalGroup(
            jPanel_AnalisisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_HerramientasDeDibujado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel_Grafico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane_Graficos.addTab("EUR/USD", jPanel_Analisis);

        jTabbedPane_Tools.addTab("Graficos", jTabbedPane_Graficos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1049, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 594, Short.MAX_VALUE)
        );

        jTabbedPane_Tools.addTab("Noticias", jPanel2);

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane_Tools)
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane_Tools)
        );

        desktopPane.add(jInternalFrame2);
        jInternalFrame2.setBounds(210, 0, 1070, 660);

        jToolBarPesta√±as.setBackground(new java.awt.Color(0, 51, 51));
        jToolBarPesta√±as.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(0, 0, 0), null, null));
        jToolBarPesta√±as.setRollover(true);

        jButtonTabla.setText("Tabla");
        jButtonTabla.setFocusable(false);
        jButtonTabla.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonTabla.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTablaActionPerformed(evt);
            }
        });
        jToolBarPesta√±as.add(jButtonTabla);
        jToolBarPesta√±as.add(jSeparator1);

        jButtonGrafica.setText("Grafica");
        jButtonGrafica.setFocusable(false);
        jButtonGrafica.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonGrafica.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGraficaActionPerformed(evt);
            }
        });
        jToolBarPesta√±as.add(jButtonGrafica);

        desktopPane.add(jToolBarPesta√±as);
        jToolBarPesta√±as.setBounds(3, 660, 1280, 40);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jMenuView.setText("View");

        jRadioButtonMenuItemGrafica.setText("Grafica");
        jRadioButtonMenuItemGrafica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemGraficaActionPerformed(evt);
            }
        });
        jMenuView.add(jRadioButtonMenuItemGrafica);

        jRadioButtonMenuItemTabla.setText("Tabla");
        jRadioButtonMenuItemTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMenuItemTablaActionPerformed(evt);
            }
        });
        jMenuView.add(jRadioButtonMenuItemTabla);

        menuBar.add(jMenuView);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jTable_listaActivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_listaActivosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable_listaActivosMouseClicked

    private void jInternalFrame1InternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame1InternalFrameIconified
        minimizarTabla();
    }//GEN-LAST:event_jInternalFrame1InternalFrameIconified

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        enableAxisTrance();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTabbedPane_GraficosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane_GraficosFocusGained

    }//GEN-LAST:event_jTabbedPane_GraficosFocusGained

    private void jTabbedPane_GraficosComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane_GraficosComponentShown

    }//GEN-LAST:event_jTabbedPane_GraficosComponentShown

    private void jRadioButtonMenuItemGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemGraficaActionPerformed
        mostrarSoloGr√°fica();
    }//GEN-LAST:event_jRadioButtonMenuItemGraficaActionPerformed

    private void jRadioButtonMenuItemTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemTablaActionPerformed
        mostrarSoloTabla();
    }//GEN-LAST:event_jRadioButtonMenuItemTablaActionPerformed

    private void jInternalFrame2InternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrame2InternalFrameIconified
        minimizarGrafica();
    }//GEN-LAST:event_jInternalFrame2InternalFrameIconified

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        CSVImportWindow csvImp=new CSVImportWindow();
        csvImp.setVisible(true);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jButtonGraficaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGraficaActionPerformed
        botonGrafica();
    }//GEN-LAST:event_jButtonGraficaActionPerformed

    private void jButtonTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTablaActionPerformed
        botonTabla();
    }//GEN-LAST:event_jButtonTablaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        activarTrace();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox_selectorListasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_selectorListasActionPerformed
        peticionKrakenApi(jComboBox_selectorListas.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBox_selectorListasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewMDIApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewMDIApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonTabla;
    private javax.swing.JComboBox<String> jComboBox_selectorListas;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenuView;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel_Analisis;
    public javax.swing.JPanel jPanel_Grafico;
    private javax.swing.JPanel jPanel_HerramientasDeDibujado;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemGrafica;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemTabla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane_Graficos;
    private javax.swing.JTabbedPane jTabbedPane_Tools;
    private javax.swing.JTable jTable_listaActivos;
    private javax.swing.JToolBar jToolBarPesta√±as;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    private void metodo() {
        jPanel_Grafico.setLayout(new BorderLayout());
        jPanel_Grafico.add(candlestickChart, BorderLayout.CENTER);
    }
    private void activarTrace(){
 
            candlestickChart.getChartPanel().addChartMouseListener(new ChartMouseListener() {
            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {
                if(!enableTrazado){
                enableTrazado=true;
                oldxPoint=cme.getTrigger().getX();
                oldyPoint=cme.getTrigger().getY();
                }
                else{
                    newxPoint=cme.getTrigger().getX();
                newyPoint=cme.getTrigger().getY();
                XYLineAnnotation xYLineAnnotation = new XYLineAnnotation(7, 7, 1000, 1000, new BasicStroke(1.0f), Color.blue);
                candlestickChart.getChartPanel().getChart().getXYPlot().addAnnotation(xYLineAnnotation) ;
                }
                
            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
                
                
            }
            
        });
   
    }
    private void enableAxisTrance(){
        if(enableTrace)
            enableTrace=false;
        else
            enableTrace=true;
        candlestickChart.AxisTrace(enableTrace);
        jPanel_Grafico.repaint();
    }
    /**
     * M√©todo que hace solo visible y a pantalla completa el frame de la grafica
     */
    private void mostrarSoloGr√°fica()
    {
        verGraficoClicado=!jRadioButtonMenuItemGrafica.isSelected();
        verTablaClicado=false;
        jRadioButtonMenuItemTabla.setSelected(false);
        try {
            jInternalFrame2.setIcon(false);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(verGraficoClicado){
            jInternalFrame1.setVisible(true);
            jInternalFrame2.reshape((int)jInternalFrame1.getSize().getWidth(), 0, (int)fixedDimensionsInternal2().getWidth(), (int)fixedDimensionsInternal2().getHeight());
        }
        else{
            jInternalFrame1.setVisible(false);
            jInternalFrame2.setVisible(true);
            jInternalFrame1.reshape(0, 0, (int)fixedDimensionsInternal1().getWidth(), (int)fixedDimensionsInternal1().getHeight());
            jInternalFrame2.reshape(0, 0, (int)desktopPane.getSize().getWidth(), (int)desktopPane.getSize().getHeight()-jToolBarPesta√±as.getSize().height);
            
        }    
    }
    /**
     * M√©todo que hace solo visible y a pantalla completa el frame de la tabla
     */
    private void mostrarSoloTabla(){
        verTablaClicado=!jRadioButtonMenuItemTabla.isSelected();
        verGraficoClicado=false;
        jRadioButtonMenuItemGrafica.setSelected(false);
        try {
            jInternalFrame1.setIcon(false);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(verTablaClicado){
            jInternalFrame2.setVisible(true);
            jInternalFrame1.reshape(0, 0, (int)fixedDimensionsInternal1().getWidth(), (int)fixedDimensionsInternal1().getHeight());
        }
        else{
            jInternalFrame2.setVisible(false);
            jInternalFrame1.setVisible(true);
            jInternalFrame2.reshape((int)jInternalFrame1.getSize().getWidth(), 0, (int)fixedDimensionsInternal2().getWidth(), (int)fixedDimensionsInternal2().getHeight());
            jInternalFrame1.reshape(0, 0, (int)desktopPane.getSize().getWidth(), (int)desktopPane.getSize().getHeight()-jToolBarPesta√±as.getSize().height);
        }
    }
    private void botonTabla(){
        if(!jInternalFrame1.isVisible()){
            jInternalFrame1.setVisible(true);
            try {
                jInternalFrame1.setIcon(false);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
            jInternalFrame2.reshape((int)jInternalFrame1.getSize().getWidth(), 0, (int)fixedDimensionsInternal2().getWidth(), (int)fixedDimensionsInternal2().getHeight());
            if(jInternalFrame2.isVisible())
                jInternalFrame1.reshape(0, 0, (int)fixedDimensionsInternal1().getWidth(), (int)fixedDimensionsInternal1().getHeight());
            else
                jInternalFrame1.reshape(0, 0, (int)desktopPane.getSize().getWidth(), (int)desktopPane.getSize().getHeight()-jToolBarPesta√±as.getSize().height);
        }
    }
    private void botonGrafica(){
        if(!jInternalFrame2.isVisible()){
            jInternalFrame2.setVisible(true);
            try {
                jInternalFrame2.setIcon(false);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
            }
            jInternalFrame1.reshape(0, 0, (int)fixedDimensionsInternal1().getWidth(), (int)fixedDimensionsInternal1().getHeight());
            if(jInternalFrame1.isVisible())
                jInternalFrame2.reshape((int)jInternalFrame1.getSize().getWidth(), 0, (int)fixedDimensionsInternal2().getWidth(), (int)fixedDimensionsInternal2().getHeight());
            else
                jInternalFrame2.reshape(0, 0, (int)desktopPane.getSize().getWidth(), (int)desktopPane.getSize().getHeight()-jToolBarPesta√±as.getSize().height);
        }
    }
    private void minimizarTabla(){
        jInternalFrame1.setVisible(false);
        if(jInternalFrame2.isVisible())
            jInternalFrame2.reshape(0, 0, (int)desktopPane.getSize().getWidth(), (int)desktopPane.getSize().getHeight()-jToolBarPesta√±as.getSize().height);
    }
    private void minimizarGrafica(){
        jInternalFrame2.setVisible(false);
        if(jInternalFrame1.isVisible())
            jInternalFrame1.reshape(0, 0, (int)desktopPane.getSize().getWidth(), (int)desktopPane.getSize().getHeight()-jToolBarPesta√±as.getSize().height);
    }
    /**
     * A√±ade un componentListener al jPanel_grafico para que se redimension cada vez que cambiamos el tama√±o de la ventana
     */
    private void enablePanelGraficoAutoSize(){
        jPanel_Grafico.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent ce) {
                ChartPanel cp = (ChartPanel)candlestickChart.getComponent(0);
                cp.setPreferredSize(new java.awt.Dimension(candlestickChart.getWidth(), candlestickChart.getHeight()));
                cp.setSize(new java.awt.Dimension(candlestickChart.getWidth(), candlestickChart.getHeight()));
                // frame.invalidate();
                jPanel_Grafico.validate();
            }

            @Override
            public void componentMoved(ComponentEvent ce) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void componentShown(ComponentEvent ce) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void componentHidden(ComponentEvent ce) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        desktopPane.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent ce) {
                
                jInternalFrame2.setPreferredSize(fixedDimensionsInternal2());
                jInternalFrame2.setSize(fixedDimensionsInternal2());
               
                jInternalFrame1.setPreferredSize(fixedDimensionsInternal1());
                jInternalFrame1.setSize(fixedDimensionsInternal1());
                
                desktopPane.validate();
            }

            @Override
            public void componentMoved(ComponentEvent ce) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void componentShown(ComponentEvent ce) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void componentHidden(ComponentEvent ce) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }
    private Dimension fixedDimensionsInternal2() {
        Dimension parentSize = desktopPane.getSize();
        Dimension childSize = jInternalFrame1.getSize();
        return new Dimension(parentSize.width-childSize.width, parentSize.height-jToolBarPesta√±as.getSize().height);
    }
    
    private Dimension fixedDimensionsInternal1() {
        Dimension parentSize = desktopPane.getSize();
        Dimension childSize = jInternalFrame2.getSize();
        return new Dimension(parentSize.width-childSize.width, parentSize.height-jToolBarPesta√±as.getSize().height);
    }
    private void inicializarListaActivos()
    {
        List<String> l=gcAPI.getListaActivos();
        for(String activo:l){
            jComboBox_selectorListas.addItem(activo);
        }
    }
    private List<String> obtenerTodasLasListas(){
        List<String> l=new ArrayList<>();
        try{
            KrakenApi api=new KrakenApi();
            api.setKey("eFdZ+5zMcIda/AIXmxgAQleAY02CQDauk0cmRBdmR1VdN4eoo9HtWraX"); // FIXME
            api.setSecret("CeLyCF83pNbPz8VjlGjl04RdiulpVVFCS8C/+XeaXT/3Ck8URYGuiJT4BWm3tfm9W4d0vRw/sJrBYveuf5GScg==");
            String response;
            response = api.queryPublic(Method.ASSET_PAIRS);
            //System.out.println(response);
            JSONObject job=new JSONObject(response);
            
            JSONObject jobResult=job.getJSONObject("result");
            Iterator<String> it=jobResult.keys();
            String key;
            JSONArray ja=null;
            while(it.hasNext()){
                key=it.next();
                if(key.substring(key.length()-2, key.length()).equalsIgnoreCase(".d")){
                    key=key.substring(0, key.length()-2);
                }
                l.add(key);
            }
            for(String activo:l){
                System.out.println(activo);
            }
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        }
        return l;
    }
    private void peticionKrakenApi(String pair)
    {
        try {
            KrakenApi api = new KrakenApi();
            api.setKey("eFdZ+5zMcIda/AIXmxgAQleAY02CQDauk0cmRBdmR1VdN4eoo9HtWraX"); // FIXME
            api.setSecret("CeLyCF83pNbPz8VjlGjl04RdiulpVVFCS8C/+XeaXT/3Ck8URYGuiJT4BWm3tfm9W4d0vRw/sJrBYveuf5GScg=="); // FIXME

            String response;
            Map<String, String> input = new HashMap<>();

            input.clear();
            input.put("pair",pair);
            input.put("since","0");
            input.put("interval","30");
            response = api.queryPublic(Method.OHLC, input);
            System.out.println(response);
            JSONObject job=new JSONObject(response);
            
            JSONObject jobResult=job.getJSONObject("result");
            Iterator<String> it=jobResult.keys();
            String key;
            JSONArray ja=null;
            while(it.hasNext()){
                key=it.next();
                if(!key.equalsIgnoreCase("last"))
                    ja=jobResult.getJSONArray(key);
            }
            
            JSONArray ja2;
            Date[] date = new Date[ja.length()];
            double[] high = new double[ja.length()];
            double[] low = new double[ja.length()];
            double[] open = new double[ja.length()];
            double[] close = new double[ja.length()];
            double[] volume = new double[ja.length()];
            for(int i=0;i<ja.length();i++){
                ja2=ja.getJSONArray(i);
                date[i]=new Date(ja2.getLong(0));
                open[i]=ja2.getDouble(1);
                high[i]=ja2.getDouble(2);
                low[i]=ja2.getDouble(3);
                close[i]=ja2.getDouble(4);
                volume[i]=ja2.getDouble(6);
                /*for(int j=0;j<ja2.length();j++){
                    System.out.println(ja2.get(j).toString());
                }*/
            }
            DefaultHighLowDataset data = new DefaultHighLowDataset(
                "", date, high, low, open, close, volume);
            candlestickChart=new CandlestickChartClass(jPanel_Grafico.getSize(), data);
            jPanel_Grafico.removeAll();
            jPanel_Grafico.setLayout(new BorderLayout());
            jPanel_Grafico.add(candlestickChart, BorderLayout.CENTER);
            jPanel_Grafico.repaint();
        } catch (IOException ex) {
            Logger.getLogger(NewMDIApplication.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
    }
}
