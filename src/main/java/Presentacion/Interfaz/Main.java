/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion.Interfaz;

import Presentacion.PopClickListener;
import Presentacion.api.KrakenApi;
import Presentacion.api.KrakenApi.Method;
import java.awt.Dimension;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Query;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.json.JSONArray;
import org.json.JSONObject;
import servicios.ActualizadorActivo;
import servicios.GestorConexionAPI;
import servicios.database.BBDD;
import servicios.modelos.Activo;
import servicios.modelos.ListaDeActivos;
import servicios.utils.Utils;

/**
 *
 * @author usuario
 */
public class Main extends javax.swing.JFrame {
    
    private boolean enableTrace;
    private boolean verGraficoClicado;
    private boolean verTablaClicado;
    private boolean enableTrazado;
    private boolean tomarDatos;
    //private CandlestickChartClass candlestickChart;
    private double oldxPoint;
    private double oldyPoint;
    private double newxPoint;
    private double newyPoint;
    private String estadoVista;
    private GestorConexionAPI gcAPI;
    private PanelGrafico PG;
    private ActualizadorActivo aa;

    /**
     * Creates new form NewMDIApplication
     */
    public Main() {
        initComponents();
        settings();
        //this.candlestickChart=new CandlestickChartClass(jPanel_Grafico.getSize());
        this.enableTrace = false;
        this.verGraficoClicado = false;
        this.verTablaClicado = false;
        this.enableTrazado = false;
        this.tomarDatos = false;
        this.gcAPI = new GestorConexionAPI();
        enableInternalFrameListaAutoSize();
        enableInternalFrameGraficoAutoSize();
        enableInternalFrameOperacionesAutoSize();
        enablePlataformaGraficadoAutoSize();
        opcionVista("Todo");
        jTabbedPane_Graficos.addMouseListener(new PopClickListener(jTabbedPane_Graficos));
        //TrayIconDemo tid=new TrayIconDemo();
        //tid.displayTray();
        //peticionKrakenApi();
        refrescarComboDeListas();
//
//        PanelGrafico pg = new PanelGrafico();
//        PanelGrafico pg2 = new PanelGrafico();
//        jTabbedPane_Graficos.addTab("poppop", pg);
//        jTabbedPane_Graficos.addTab("Poppop2", pg2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jInternalFrameGrafico = new javax.swing.JInternalFrame();
        jTabbedPane_Tools = new javax.swing.JTabbedPane();
        jTabbedPane_Graficos = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jInternalFrameOperaciones = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jInternalFrameLista = new javax.swing.JInternalFrame();
        jPanel_Activos = new javax.swing.JPanel();
        jComboBox_selectorListas = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_tablaActivos = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuItemNuevoActivo = new javax.swing.JMenuItem();
        jMenuItemImportarDatos = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem_Inventario_Activos = new javax.swing.JMenuItem();
        jMenuItem_Inventario_listaDeActivos = new javax.swing.JMenuItem();
        jMenuViewTodo = new javax.swing.JMenu();
        jMenuItemTodo = new javax.swing.JMenuItem();
        jMenuItemGrafico = new javax.swing.JMenuItem();
        jMenuItemOperaciones = new javax.swing.JMenuItem();
        jMenuItemGrafOp = new javax.swing.JMenuItem();
        jMenuItemGrafList = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktopPane.setPreferredSize(new java.awt.Dimension(1280, 699));

        jInternalFrameGrafico.setResizable(true);
        jInternalFrameGrafico.setVisible(true);
        jInternalFrameGrafico.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrameGraficoInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jTabbedPane_Graficos.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane_Graficos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane_GraficosFocusGained(evt);
            }
        });
        jTabbedPane_Graficos.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTabbedPane_GraficosComponentShown(evt);
            }
        });
        jTabbedPane_Tools.addTab("Graficos", jTabbedPane_Graficos);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1049, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 602, Short.MAX_VALUE)
        );

        jTabbedPane_Tools.addTab("Dashboard", jPanel2);

        javax.swing.GroupLayout jInternalFrameGraficoLayout = new javax.swing.GroupLayout(jInternalFrameGrafico.getContentPane());
        jInternalFrameGrafico.getContentPane().setLayout(jInternalFrameGraficoLayout);
        jInternalFrameGraficoLayout.setHorizontalGroup(
            jInternalFrameGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane_Tools)
        );
        jInternalFrameGraficoLayout.setVerticalGroup(
            jInternalFrameGraficoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane_Tools)
        );

        desktopPane.add(jInternalFrameGrafico);
        jInternalFrameGrafico.setBounds(210, 0, 1070, 660);

        jInternalFrameOperaciones.setVisible(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jInternalFrameOperacionesLayout = new javax.swing.GroupLayout(jInternalFrameOperaciones.getContentPane());
        jInternalFrameOperaciones.getContentPane().setLayout(jInternalFrameOperacionesLayout);
        jInternalFrameOperacionesLayout.setHorizontalGroup(
            jInternalFrameOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1264, Short.MAX_VALUE)
        );
        jInternalFrameOperacionesLayout.setVerticalGroup(
            jInternalFrameOperacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        desktopPane.add(jInternalFrameOperaciones);
        jInternalFrameOperaciones.setBounds(0, 660, 1280, 230);

        jInternalFrameLista.setResizable(true);
        jInternalFrameLista.setMinimumSize(new java.awt.Dimension(0, 0));
        jInternalFrameLista.setVisible(true);
        jInternalFrameLista.addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                jInternalFrameListaInternalFrameIconified(evt);
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jComboBox_selectorListas.setModel(new DefaultComboBoxModel<>());
        jComboBox_selectorListas.setEnabled(false);
        jComboBox_selectorListas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_selectorListasItemStateChanged(evt);
            }
        });
        jComboBox_selectorListas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_selectorListasActionPerformed(evt);
            }
        });

        jTable_tablaActivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Ticker"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_tablaActivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_tablaActivosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_tablaActivos);

        javax.swing.GroupLayout jPanel_ActivosLayout = new javax.swing.GroupLayout(jPanel_Activos);
        jPanel_Activos.setLayout(jPanel_ActivosLayout);
        jPanel_ActivosLayout.setHorizontalGroup(
            jPanel_ActivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(jComboBox_selectorListas, 0, 194, Short.MAX_VALUE)
        );
        jPanel_ActivosLayout.setVerticalGroup(
            jPanel_ActivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_ActivosLayout.createSequentialGroup()
                .addComponent(jComboBox_selectorListas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jInternalFrameListaLayout = new javax.swing.GroupLayout(jInternalFrameLista.getContentPane());
        jInternalFrameLista.getContentPane().setLayout(jInternalFrameListaLayout);
        jInternalFrameListaLayout.setHorizontalGroup(
            jInternalFrameListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 209, Short.MAX_VALUE)
            .addGroup(jInternalFrameListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_Activos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrameListaLayout.setVerticalGroup(
            jInternalFrameListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
            .addGroup(jInternalFrameListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jInternalFrameListaLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel_Activos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        desktopPane.add(jInternalFrameLista);
        jInternalFrameLista.setBounds(0, 0, 210, 660);

        jMenuArchivo.setText("Archivo");

        jMenuItemNuevoActivo.setText("Nuevo Activo");
        jMenuItemNuevoActivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNuevoActivoActionPerformed(evt);
            }
        });
        jMenuArchivo.add(jMenuItemNuevoActivo);

        jMenuItemImportarDatos.setText("Importar Datos");
        jMenuArchivo.add(jMenuItemImportarDatos);

        menuBar.add(jMenuArchivo);

        jMenu1.setText(" Inventario");

        jMenuItem_Inventario_Activos.setText("Activos");
        jMenuItem_Inventario_Activos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Inventario_ActivosActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Inventario_Activos);

        jMenuItem_Inventario_listaDeActivos.setText("Lista de Activos");
        jMenuItem_Inventario_listaDeActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_Inventario_listaDeActivosActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_Inventario_listaDeActivos);

        menuBar.add(jMenu1);

        jMenuViewTodo.setText("Vista");

        jMenuItemTodo.setText("Todo");
        jMenuItemTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemTodoActionPerformed(evt);
            }
        });
        jMenuViewTodo.add(jMenuItemTodo);

        jMenuItemGrafico.setText("Grafico");
        jMenuItemGrafico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGraficoActionPerformed(evt);
            }
        });
        jMenuViewTodo.add(jMenuItemGrafico);

        jMenuItemOperaciones.setText("Operaciones");
        jMenuItemOperaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOperacionesActionPerformed(evt);
            }
        });
        jMenuViewTodo.add(jMenuItemOperaciones);

        jMenuItemGrafOp.setText("Grafico+Operaciones");
        jMenuItemGrafOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGrafOpActionPerformed(evt);
            }
        });
        jMenuViewTodo.add(jMenuItemGrafOp);

        jMenuItemGrafList.setText("Grafico+Lista");
        jMenuItemGrafList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemGrafListActionPerformed(evt);
            }
        });
        jMenuViewTodo.add(jMenuItemGrafList);

        menuBar.add(jMenuViewTodo);

        jMenu2.setText("Ayuda");

        jMenu4.setText("Acerca de...");
        jMenu2.add(jMenu4);

        menuBar.add(jMenu2);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jInternalFrameGraficoInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrameGraficoInternalFrameIconified

    }//GEN-LAST:event_jInternalFrameGraficoInternalFrameIconified

    private void jMenuItemTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemTodoActionPerformed
        opcionVista(jMenuItemTodo.getText());
    }//GEN-LAST:event_jMenuItemTodoActionPerformed

    private void jMenuItemGraficoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGraficoActionPerformed
        opcionVista(jMenuItemGrafico.getText());
    }//GEN-LAST:event_jMenuItemGraficoActionPerformed

    private void jMenuItemOperacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOperacionesActionPerformed
        opcionVista(jMenuItemOperaciones.getText());
    }//GEN-LAST:event_jMenuItemOperacionesActionPerformed

    private void jMenuItemGrafOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGrafOpActionPerformed
        opcionVista(jMenuItemGrafOp.getText());
    }//GEN-LAST:event_jMenuItemGrafOpActionPerformed

    private void jMenuItemGrafListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemGrafListActionPerformed
        opcionVista(jMenuItemGrafList.getText());
    }//GEN-LAST:event_jMenuItemGrafListActionPerformed

    private void jMenuItemNuevoActivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNuevoActivoActionPerformed
        nuevoActivo();
    }//GEN-LAST:event_jMenuItemNuevoActivoActionPerformed

    private void jInternalFrameListaInternalFrameIconified(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_jInternalFrameListaInternalFrameIconified

    }//GEN-LAST:event_jInternalFrameListaInternalFrameIconified

    private void jComboBox_selectorListasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_selectorListasActionPerformed
        
        refrescarListaDeActivos();

    }//GEN-LAST:event_jComboBox_selectorListasActionPerformed

    private void jMenuItem_Inventario_ActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Inventario_ActivosActionPerformed
        // TODO add your handling code here:
        new CRUDWindow("Activos", this).setVisible(true);
    }//GEN-LAST:event_jMenuItem_Inventario_ActivosActionPerformed

    private void jMenuItem_Inventario_listaDeActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_Inventario_listaDeActivosActionPerformed
        // TODO add your handling code here:
        new CRUDWindow("Lista De Activos", this).setVisible(true);
    }//GEN-LAST:event_jMenuItem_Inventario_listaDeActivosActionPerformed

    private void jTable_tablaActivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_tablaActivosMouseClicked
        
        onDoubleClick(evt);
    }//GEN-LAST:event_jTable_tablaActivosMouseClicked

    private void jComboBox_selectorListasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_selectorListasItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_selectorListasItemStateChanged

    private void jTabbedPane_GraficosComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTabbedPane_GraficosComponentShown

    }//GEN-LAST:event_jTabbedPane_GraficosComponentShown

    private void jTabbedPane_GraficosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane_GraficosFocusGained

    }//GEN-LAST:event_jTabbedPane_GraficosFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JComboBox<ListaDeActivos> jComboBox_selectorListas;
    private javax.swing.JInternalFrame jInternalFrameGrafico;
    private javax.swing.JInternalFrame jInternalFrameLista;
    private javax.swing.JInternalFrame jInternalFrameOperaciones;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenuItem jMenuItemGrafList;
    private javax.swing.JMenuItem jMenuItemGrafOp;
    private javax.swing.JMenuItem jMenuItemGrafico;
    private javax.swing.JMenuItem jMenuItemImportarDatos;
    private javax.swing.JMenuItem jMenuItemNuevoActivo;
    private javax.swing.JMenuItem jMenuItemOperaciones;
    private javax.swing.JMenuItem jMenuItemTodo;
    private javax.swing.JMenuItem jMenuItem_Inventario_Activos;
    private javax.swing.JMenuItem jMenuItem_Inventario_listaDeActivos;
    private javax.swing.JMenu jMenuViewTodo;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel_Activos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane_Graficos;
    private javax.swing.JTabbedPane jTabbedPane_Tools;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable_tablaActivos;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

    /*private void activarTrace(){
 
            candlestickChart.getChartPanel().addChartMouseListener(new ChartMouseListener() {
            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {
                if(!enableTrazado){
                enableTrazado=true;
                oldxPoint=cme.getTrigger().getX();
                oldyPoint=cme.getTrigger().getY();
                }
                else{
                    newxPoint=cme.getTrigger().getX();
                newyPoint=cme.getTrigger().getY();
                XYLineAnnotation xYLineAnnotation = new XYLineAnnotation(7, 7, 1000, 1000, new BasicStroke(1.0f), Color.blue);
                candlestickChart.getChartPanel().getChart().getXYPlot().addAnnotation(xYLineAnnotation) ;
                }
                
            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
                
                
            }
            
        });
   
    }*/
    /**
     * Método que redimensiona el resto de ventanas cuando redimensionamos la
     * ventana de la lista
     */
    private void enableInternalFrameListaAutoSize() {
        jInternalFrameLista.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent ce) {
                jInternalFrameGrafico.reshape(jInternalFrameLista.getSize().width, 0, desktopPane.getSize().width - jInternalFrameLista.getSize().width, jInternalFrameLista.getSize().height);
                jInternalFrameOperaciones.reshape(0, jInternalFrameLista.getSize().height, desktopPane.getSize().width, desktopPane.getSize().height - jInternalFrameLista.getSize().height);
                jInternalFrameLista.validate();
            }
            
            @Override
            public void componentMoved(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentShown(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentHidden(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    /**
     * Método que redimensiona el resto de ventanas cuando redimensionamos la
     * ventana del grafico
     */
    private void enableInternalFrameGraficoAutoSize() {
        jInternalFrameGrafico.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent ce) {
                jInternalFrameLista.reshape(0, 0, desktopPane.getSize().width - jInternalFrameGrafico.getSize().width, jInternalFrameGrafico.getSize().height);
                jInternalFrameOperaciones.reshape(0, jInternalFrameGrafico.getSize().height, desktopPane.getSize().width, desktopPane.getSize().height - jInternalFrameGrafico.getSize().height);
                jInternalFrameGrafico.validate();
            }
            
            @Override
            public void componentMoved(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentShown(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentHidden(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    /**
     * Método que redimensiona el resto de ventanas cuando redimensionamos la
     * ventana de operaciones
     */
    private void enableInternalFrameOperacionesAutoSize() {
        jInternalFrameOperaciones.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent ce) {
                jInternalFrameLista.reshape(0, 0, jInternalFrameLista.getSize().width, desktopPane.getSize().height - jInternalFrameOperaciones.getSize().height);
                jInternalFrameGrafico.reshape(jInternalFrameLista.getSize().width, 0, jInternalFrameGrafico.getSize().width, desktopPane.getSize().height - jInternalFrameOperaciones.getSize().height);
                jInternalFrameOperaciones.validate();
            }
            
            @Override
            public void componentMoved(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentShown(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentHidden(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
    }

    /**
     * Añade un componentListener al jPanel_grafico para que se redimension cada
     * vez que cambiamos el tamaño de la ventana
     */
    private void enablePlataformaGraficadoAutoSize() {
        desktopPane.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent ce) {
                
                jInternalFrameGrafico.setPreferredSize(fixedDimensionsInternalGrafico());
                jInternalFrameGrafico.setSize(fixedDimensionsInternalGrafico());
                
                jInternalFrameLista.setPreferredSize(fixedDimensionsInternalLista());
                jInternalFrameLista.setSize(fixedDimensionsInternalLista());
                
                jInternalFrameOperaciones.setPreferredSize(fixedDimensionsInternalOperaciones());
                jInternalFrameOperaciones.setSize(fixedDimensionsInternalOperaciones());
                jInternalFrameOperaciones.setLocation(0, jInternalFrameGrafico.getSize().height);
                
                desktopPane.validate();
            }
            
            @Override
            public void componentMoved(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentShown(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
            
            @Override
            public void componentHidden(ComponentEvent ce) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        
    }

    /**
     * Método que devuelve las dimensiones que debe tener la ventana del gráfico
     * cuando redimensionamos la ventana principal
     *
     * @return objeto Dimension con las dimensiones que debe tener la ventana
     * del gráfico
     */
    private Dimension fixedDimensionsInternalGrafico() {
        Dimension parentSize = desktopPane.getSize();
        Dimension childSize = jInternalFrameLista.getSize();
        return new Dimension(parentSize.width - childSize.width, parentSize.height - jInternalFrameOperaciones.getSize().height);
    }

    /**
     * Método que devuelve las dimensiones que debe tener la ventana de la lista
     * cuando redimensionamos la ventana principal
     *
     * @return objeto Dimension con las dimensiones que debe tener la ventana de
     * la lista
     */
    private Dimension fixedDimensionsInternalLista() {
        Dimension parentSize = desktopPane.getSize();
        Dimension childSize = jInternalFrameGrafico.getSize();
        return new Dimension(parentSize.width - childSize.width, parentSize.height - jInternalFrameOperaciones.getSize().height);
    }

    /**
     * Método que devuelve las dimensiones que debe tener la ventana de
     * operaciones cuando redimensionamos la ventana principal
     *
     * @return objeto Dimension con las dimensiones que debe tener la ventana
     * Operaciones
     */
    private Dimension fixedDimensionsInternalOperaciones() {
        Dimension parentSize = desktopPane.getSize();
        Dimension childSize2 = jInternalFrameGrafico.getSize();
        return new Dimension(parentSize.width, parentSize.height - childSize2.height);
    }

    /**
     * Método que a partir de una variable pasada como parámetro cambia la
     * distribución de las ventanas de la aplicación
     *
     * @param vista variable string que indica como se van a distribuir las
     * ventanas
     */
    private void opcionVista(String vista) {
        jInternalFrameLista.setVisible(true);
        jInternalFrameGrafico.setVisible(true);
        jInternalFrameOperaciones.setVisible(true);
        jInternalFrameLista.reshape(0, 0, (desktopPane.getSize().width / 10) * 2, (desktopPane.getSize().height / 10) * 7);
        jInternalFrameGrafico.reshape(jInternalFrameLista.getSize().width, 0, (desktopPane.getSize().width / 10) * 8, (desktopPane.getSize().height / 10) * 7);
        jInternalFrameOperaciones.reshape(0, jInternalFrameLista.getSize().height, desktopPane.getSize().width, (desktopPane.getSize().height / 10) * 3);
        switch (vista) {
            case "Grafico":
                jInternalFrameLista.setVisible(false);
                jInternalFrameOperaciones.setVisible(false);
                jInternalFrameLista.reshape(0, 0, 0, desktopPane.getSize().height);
                jInternalFrameOperaciones.reshape(0, desktopPane.getSize().height, desktopPane.getSize().width, 0);
                jInternalFrameGrafico.reshape(0, 0, desktopPane.getSize().width, desktopPane.getSize().height);
                break;
            case "Operaciones":
                jInternalFrameLista.setVisible(false);
                jInternalFrameGrafico.setVisible(false);
                jInternalFrameLista.reshape(0, 0, jInternalFrameLista.getSize().width, 0);
                jInternalFrameGrafico.reshape(jInternalFrameLista.getSize().width, 0, jInternalFrameGrafico.getSize().width, 0);
                jInternalFrameOperaciones.reshape(0, 0, desktopPane.getSize().width, desktopPane.getSize().height);
                break;
            case "Grafico+Operaciones":
                jInternalFrameLista.setVisible(false);
                jInternalFrameLista.reshape(0, 0, 0, jInternalFrameLista.getSize().height);
                jInternalFrameGrafico.reshape(0, 0, desktopPane.getSize().width, (desktopPane.getSize().height / 10) * 7);
                jInternalFrameOperaciones.reshape(0, jInternalFrameGrafico.getSize().height, desktopPane.getSize().width, (desktopPane.getSize().height / 10) * 3);
                break;
            case "Grafico+Lista":
                jInternalFrameOperaciones.setVisible(false);
                jInternalFrameOperaciones.reshape(0, desktopPane.getSize().height, desktopPane.getSize().width, 0);
                jInternalFrameLista.reshape(0, 0, (desktopPane.getSize().width / 10) * 2, desktopPane.getSize().height);
                jInternalFrameGrafico.reshape(jInternalFrameLista.getSize().width, 0, (desktopPane.getSize().width / 10) * 8, desktopPane.getSize().height);
                break;
        }
    }

    /**
     * Metodo que abre un panel para realizar la importacion de un nuevo activo
     */
    private void nuevoActivo() {
        new Presentacion.Interfaz.CSVImportWindow().setVisible(true);
    }

    /**
     * Método que a traves de la api, obtiene un list con todos los activos y
     * loc introduce en un comboBox
     */
    public void refrescarComboDeListas() {
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                jComboBox_selectorListas.setEnabled(false);
                jTable_tablaActivos.setEnabled(false);
                Query query = BBDD.getSession().createQuery("from ListaDeActivos");
                List<ListaDeActivos> listaDeListasDeActivos = query.list();
                jComboBox_selectorListas.removeAllItems();
                for (ListaDeActivos listaDeActivos : listaDeListasDeActivos) {
                    jComboBox_selectorListas.addItem(listaDeActivos);
                }
                if (jComboBox_selectorListas.getSelectedItem() == null && jComboBox_selectorListas.getModel().getSize() > 0) {
                    jComboBox_selectorListas.setSelectedIndex(0);
                }
                refrescarListaDeActivos();
                jComboBox_selectorListas.setEnabled(true);
                jTable_tablaActivos.setEnabled(true);
            }
        };
        runnable.run();
    }
    
    public void refrescarListaDeActivos() {
        Runnable runnable;
        runnable = new Runnable() {
            @Override
            public void run() {
                jTable_tablaActivos.setEnabled(false);
                ListaDeActivos listaSeleccionada = (ListaDeActivos) jComboBox_selectorListas.getSelectedItem();
                if (listaSeleccionada != null) {
                    Set<Activo> activos = listaSeleccionada.getActivos();
                    ArrayList<Activo> arrayListActivos = new ArrayList<>(activos);
                    String[] header = {"Simbolo"};
                    Activo[][] datosActivo = new Activo[arrayListActivos.size()][1];
                    for (int i = 0; i < arrayListActivos.size(); i++) {
                        Activo activo = arrayListActivos.get(i);
                        datosActivo[i][0] = activo;
                    }
                    DefaultTableModel defaultTableModel = new DefaultTableModel(datosActivo, header) {
                        public boolean isCellEditable(int rowIndex, int mColIndex) {
                            return false;
                        }
                    };
                    
                    jTable_tablaActivos.setModel(defaultTableModel);
                } else {
                    jTable_tablaActivos.setModel(new DefaultTableModel());
                }
                jTable_tablaActivos.setEnabled(true);
            }
            
        };
        runnable.run();
    }
    
    private void peticionKrakenApi(String pair) {
        try {
            KrakenApi api = new KrakenApi();
            api.setKey("eFdZ+5zMcIda/AIXmxgAQleAY02CQDauk0cmRBdmR1VdN4eoo9HtWraX"); // FIXME
            api.setSecret("CeLyCF83pNbPz8VjlGjl04RdiulpVVFCS8C/+XeaXT/3Ck8URYGuiJT4BWm3tfm9W4d0vRw/sJrBYveuf5GScg=="); // FIXME

            String response;
            Map<String, String> input = new HashMap<>();
            
            input.clear();
            input.put("pair", pair);
            input.put("since", "0");
            input.put("interval", "30");
            response = api.queryPublic(Method.OHLC, input);
            System.out.println(response);
            JSONObject job = new JSONObject(response);
            
            JSONObject jobResult = job.getJSONObject("result");
            Iterator<String> it = jobResult.keys();
            String key;
            JSONArray ja = null;
            while (it.hasNext()) {
                key = it.next();
                if (!key.equalsIgnoreCase("last")) {
                    ja = jobResult.getJSONArray(key);
                }
            }
            
            JSONArray ja2;
            Date[] date = new Date[ja.length()];
            double[] high = new double[ja.length()];
            double[] low = new double[ja.length()];
            double[] open = new double[ja.length()];
            double[] close = new double[ja.length()];
            double[] volume = new double[ja.length()];
            for (int i = 0; i < ja.length(); i++) {
                ja2 = ja.getJSONArray(i);
                date[i] = new Date(ja2.getLong(0));
                open[i] = ja2.getDouble(1);
                high[i] = ja2.getDouble(2);
                low[i] = ja2.getDouble(3);
                close[i] = ja2.getDouble(4);
                volume[i] = ja2.getDouble(6);
                /*for(int j=0;j<ja2.length();j++){
                    System.out.println(ja2.get(j).toString());
                }*/
            }
            DefaultHighLowDataset data = new DefaultHighLowDataset(
                    "", date, high, low, open, close, volume);
            /*candlestickChart=new CandlestickChartClass(jPanel_Grafico.getSize(), data);
            jPanel_Grafico.removeAll();
            jPanel_Grafico.setLayout(new BorderLayout());
            jPanel_Grafico.add(candlestickChart, BorderLayout.CENTER);
            jPanel_Grafico.repaint();*/
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void settings() {
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon("src/main/resources/pictures/LogoPlataformaGraficado_sin_titulo.png").getImage());
    }
    
    private void onDoubleClick(java.awt.event.MouseEvent e) {
        if (e.getClickCount() == 2 && !e.isConsumed()) {
            e.consume();
            //handle double click event.
            Activo activo = (Activo) jTable_tablaActivos.getValueAt(jTable_tablaActivos.getSelectedRow(), 0);
            if (activo != null) {
                PanelGrafico pg = new PanelGrafico();
                jTabbedPane_Graficos.addTab(activo.getSimbolo(), pg);
                jTabbedPane_Graficos.setSelectedIndex(jTabbedPane_Graficos.getComponents().length - 1);
                PG = (PanelGrafico) jTabbedPane_Graficos.getSelectedComponent();
                if (PG != null) {
                    PG.pintarGrafico(jComboBox_selectorListas.getSelectedItem().toString());
                }
                if (aa != null) {
                    aa.cancel(true);
                }
                aa = new ActualizadorActivo(PG, jComboBox_selectorListas.getSelectedItem().toString());
                aa.execute();
                PG.pintarGrafico(jComboBox_selectorListas.getSelectedItem().toString());
            }
        }
    }
    
}
